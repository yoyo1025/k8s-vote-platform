// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: result/v1/result.proto

package resultv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResultService_Ping_FullMethodName            = "/result.v1.ResultService/Ping"
	ResultService_GetTotals_FullMethodName       = "/result.v1.ResultService/GetTotals"
	ResultService_SubscribeTotals_FullMethodName = "/result.v1.ResultService/SubscribeTotals"
)

// ResultServiceClient is the client API for ResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetTotals(ctx context.Context, in *GetTotalsRequest, opts ...grpc.CallOption) (*GetTotalsResponse, error)
	SubscribeTotals(ctx context.Context, in *SubscribeTotalsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeTotalsResponse], error)
}

type resultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResultServiceClient(cc grpc.ClientConnInterface) ResultServiceClient {
	return &resultServiceClient{cc}
}

func (c *resultServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ResultService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) GetTotals(ctx context.Context, in *GetTotalsRequest, opts ...grpc.CallOption) (*GetTotalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTotalsResponse)
	err := c.cc.Invoke(ctx, ResultService_GetTotals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultServiceClient) SubscribeTotals(ctx context.Context, in *SubscribeTotalsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeTotalsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ResultService_ServiceDesc.Streams[0], ResultService_SubscribeTotals_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTotalsRequest, SubscribeTotalsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResultService_SubscribeTotalsClient = grpc.ServerStreamingClient[SubscribeTotalsResponse]

// ResultServiceServer is the server API for ResultService service.
// All implementations must embed UnimplementedResultServiceServer
// for forward compatibility.
type ResultServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetTotals(context.Context, *GetTotalsRequest) (*GetTotalsResponse, error)
	SubscribeTotals(*SubscribeTotalsRequest, grpc.ServerStreamingServer[SubscribeTotalsResponse]) error
	mustEmbedUnimplementedResultServiceServer()
}

// UnimplementedResultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResultServiceServer struct{}

func (UnimplementedResultServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedResultServiceServer) GetTotals(context.Context, *GetTotalsRequest) (*GetTotalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotals not implemented")
}
func (UnimplementedResultServiceServer) SubscribeTotals(*SubscribeTotalsRequest, grpc.ServerStreamingServer[SubscribeTotalsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTotals not implemented")
}
func (UnimplementedResultServiceServer) mustEmbedUnimplementedResultServiceServer() {}
func (UnimplementedResultServiceServer) testEmbeddedByValue()                       {}

// UnsafeResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResultServiceServer will
// result in compilation errors.
type UnsafeResultServiceServer interface {
	mustEmbedUnimplementedResultServiceServer()
}

func RegisterResultServiceServer(s grpc.ServiceRegistrar, srv ResultServiceServer) {
	// If the following call pancis, it indicates UnimplementedResultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResultService_ServiceDesc, srv)
}

func _ResultService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_GetTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultServiceServer).GetTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResultService_GetTotals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultServiceServer).GetTotals(ctx, req.(*GetTotalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultService_SubscribeTotals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTotalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResultServiceServer).SubscribeTotals(m, &grpc.GenericServerStream[SubscribeTotalsRequest, SubscribeTotalsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ResultService_SubscribeTotalsServer = grpc.ServerStreamingServer[SubscribeTotalsResponse]

// ResultService_ServiceDesc is the grpc.ServiceDesc for ResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "result.v1.ResultService",
	HandlerType: (*ResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ResultService_Ping_Handler,
		},
		{
			MethodName: "GetTotals",
			Handler:    _ResultService_GetTotals_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTotals",
			Handler:       _ResultService_SubscribeTotals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "result/v1/result.proto",
}
