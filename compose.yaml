version: '3'

x-kong-config:
  &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: db-postgres
  KONG_PG_PASSWORD: kongpass
  KONG_PG_USER: kong

networks:
  kong-net:
    external: false
  vote-net:
    external: false

services:
  kong-migrations:
    image: kong:3.5.0
    command: >
      sh -c "
        set -e
        kong migrations bootstrap || true
        kong migrations up
        kong migrations finish
      "
    profiles: [ "database" ]
    depends_on:
      db-postgres:
        condition: service_healthy
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: kong:3.5.0
    profiles: [ "gateway" ]
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      db-postgres:
        condition: service_healthy
    environment:
      <<: *kong-env
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    networks:
      - kong-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8005:8005"
      - "8006:8006"
      - "8443:8443"
      - "8444:8444"
      - "8445:8445"
    restart: on-failure

  db-postgres:
    image: postgres:16.1-bullseye
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net

  vote-redis:
    image: redis:7
    profiles: [ "vote" ]
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - vote-net
    ports:
      - "6379:6379"

  vote-postgres:
    image: postgres:16.1-bullseye
    profiles: [ "vote" ]
    environment:
      POSTGRES_DB: vote
      POSTGRES_USER: vote
      POSTGRES_PASSWORD: votepass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vote"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    volumes:
      - vote-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - vote-net
    ports:
      - "5432:5432"

  vote-api:
    image: golang:1.25
    profiles: [ "vote" ]
    depends_on:
      vote-redis:
        condition: service_started
      vote-postgres:
        condition: service_healthy
    working_dir: /workspace/services/vote-api
    command: go run ./cmd/vote-api
    environment:
      HTTP_ADDR: ":8080"
      REDIS_ADDR: vote-redis:6379
      REDIS_STREAM: stream:votes
      PG_HOST: vote-postgres
      PG_PORT: "5432"
      PG_USER: vote
      PG_PASSWORD: votepass
      PG_DATABASE: vote
      PG_SSLMODE: disable
    volumes:
      - .:/workspace
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - vote-net

  vote-worker:
    image: golang:1.25
    profiles: [ "vote" ]
    depends_on:
      vote-redis:
        condition: service_started
      vote-postgres:
        condition: service_healthy
    working_dir: /workspace/services/worker
    command: go run ./cmd/worker
    environment:
      REDIS_ADDR: vote-redis:6379
      REDIS_STREAM: stream:votes
      REDIS_GROUP: tally
      PG_HOST: vote-postgres
      PG_PORT: "5432"
      PG_USER: vote
      PG_PASSWORD: votepass
      PG_DATABASE: vote
      PG_SSLMODE: disable
      BATCH_SIZE: "100"
      BLOCK_INTERVAL: 5s
      IDLE_TIMEOUT: 30s
    volumes:
      - .:/workspace
    restart: unless-stopped
    networks:
      - vote-net

volumes:
  vote-postgres-data:
